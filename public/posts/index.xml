<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on morita&#39;s blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on morita&#39;s blog</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 10 May 2025 13:08:15 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lua基本文法まとめ</title>
      <link>http://localhost:1313/posts/lua/</link>
      <pubDate>Sat, 10 May 2025 13:08:15 +0900</pubDate>
      <guid>http://localhost:1313/posts/lua/</guid>
      <description>&lt;p&gt;Neovimなどの設定記述言語として使われているLua言語の基本文法&lt;/p&gt;&#xA;&lt;h2 id=&#34;文字列&#34;&gt;文字列&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;文字列の結合は&lt;code&gt;..&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[[string]]&lt;/code&gt;はエスケープ&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;string.format()&lt;/code&gt;でpythonのfstringのように文字列が作れる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;変数&#34;&gt;変数&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Luaの変数は基本的にグローバル&lt;/li&gt;&#xA;&lt;li&gt;型は指定しないが存在はする(動的型付け)&lt;/li&gt;&#xA;&lt;li&gt;型の種類&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;number&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;function&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;userdata&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;table&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;演算&#34;&gt;演算&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;四則演算&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;+&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;*&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;%&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;比較演算&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;lt;, &amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;lt;=, &amp;gt;=&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;==, ~=&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;論理演算&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;and&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;or&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;not&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;io&#34;&gt;I/O&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;io.write()&lt;/code&gt;: 標準出力への書き出し&#xA;&lt;code&gt;io.read()&lt;/code&gt;: 標準入力からの読み込み&lt;/p&gt;&#xA;&lt;h2 id=&#34;制御文&#34;&gt;制御文&lt;/h2&gt;&#xA;&lt;h3 id=&#34;if文&#34;&gt;if文&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-:&#34; data-lang=&#34;:&#34;&gt;if(exp) then&#xA;  ...&#xA;elseif(exp) then&#xA;  ...&#xA;else&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;while文&#34;&gt;while文&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-:lua&#34; data-lang=&#34;:lua&#34;&gt;while (exp) do&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;for文&#34;&gt;for文&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Numeric for&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-:lua&#34; data-lang=&#34;:lua&#34;&gt;for init, end, inc do&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;Generic for&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;repeat文&#34;&gt;repeat文&lt;/h3&gt;&#xA;&lt;p&gt;まず&amp;hellip;の処理が実行される&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux学習記録</title>
      <link>http://localhost:1313/posts/linux/</link>
      <pubDate>Sat, 10 May 2025 12:57:03 +0900</pubDate>
      <guid>http://localhost:1313/posts/linux/</guid>
      <description>&lt;h2 id=&#34;ディレクトリ構造&#34;&gt;ディレクトリ構造&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;/&lt;/code&gt;: ルートディレクトリの事で、システムの最上位のディレクトリ。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;~&lt;/code&gt;: ホームディレクトリのことで、ログインしたユーザのトップディレクトリ。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/etc&lt;/code&gt;: 設定ファイル系が格納される&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/var&lt;/code&gt;: システムなどのログや生成データが格納される&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;macunix&#34;&gt;Mac(unix)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;uuidgen&lt;/code&gt;: UUIDを生成できる&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pbcopy/pbpaste&lt;/code&gt;: クリップボードに保存・貼り付けができる。&lt;code&gt;echo &amp;quot;Hello,World.&amp;quot; | pbcopy&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;systemd&#34;&gt;systemd&lt;/h2&gt;&#xA;&lt;h3 id=&#34;systemd概要&#34;&gt;systemd概要&lt;/h3&gt;&#xA;&lt;p&gt;Linuxにおいて起動処理やシステム全体の管理を行うデーモンプロセス。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;カーネルが生成する最初のユーザプロセス&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PID=1が割り当てられる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;systemd起動の流れ&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BIOS/UEFI -&amp;gt; ブートローダ -&amp;gt; カーネル -&amp;gt; init/systemd&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GRUB2によってHDDからメモリへカーネルがロードされる&lt;/li&gt;&#xA;&lt;li&gt;カーネルはH/Wを認識できるようになった後systemdを起動する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;systemdはUnitという単位でシステム起動処理を行う&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;従来(init/upstart)との違い&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;init/upstartでは、シェルスクリプトによって起動プロセスが順番に実行されていた&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;/etc/rc.d&lt;/code&gt;配下のスクリプトが実施&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;systemdの場合、スクリプト方式は廃止。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;これまでのスクリプトの仕事は全てUnitとして定義された&lt;/li&gt;&#xA;&lt;li&gt;systemdはUnitを直接起動させる&lt;/li&gt;&#xA;&lt;li&gt;init/upstartと違い、順番ではなく並列的に実行されるようになった&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Unitの特徴&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スクリプトではなく設定ファイルに記述&lt;/li&gt;&#xA;&lt;li&gt;Unit間の依存・順序関係(並列処理)の定義&lt;/li&gt;&#xA;&lt;li&gt;Unitは役割によっていくつかの種類がある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;target, mount, service, device, socketなど&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;systemd起動時、default.targetというUnitを頂点として、依存関係のツリーが構築される&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Unitの定義ファイルの場所&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;/usr/lib/systemd/system/&lt;/code&gt;: システムのデフォルトのUnit設定ファイル&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/etc/systemd/system&lt;/code&gt;: ユーザ独自のUnit設定ファイル。優先はこっち&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;systemctlコマンド一覧&#34;&gt;systemctlコマンド一覧&lt;/h3&gt;&#xA;&lt;p&gt;systemdを操作するためのクライアント。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl start &amp;lt;Unit&amp;gt;&lt;/code&gt;: ユニット起動&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl stop &amp;lt;Unit&amp;gt;&lt;/code&gt;: ユニット停止&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl restart &amp;lt;Unit&amp;gt;&lt;/code&gt;: ユニット再起動&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl reload &amp;lt;Unit&amp;gt;&lt;/code&gt;: ユニット&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl status &amp;lt;Unit&amp;gt;&lt;/code&gt;: ユニットの状態確認&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl enable &amp;lt;Unit&amp;gt;&lt;/code&gt;: 自動起動の有効化&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl disable &amp;lt;Unit&amp;gt;&lt;/code&gt;: 自動起動の無効化&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl is-enabled &amp;lt;Unit&amp;gt;&lt;/code&gt;: 自動起動設定の確認&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl list-unit-files --type=&amp;lt;type&amp;gt;&lt;/code&gt;: ユニット一覧の表示&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;systemctl daemon-reload&lt;/code&gt;: ユニット設定ファイルの再読み込み&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;systemdのログ&#34;&gt;systemdのログ&lt;/h3&gt;&#xA;&lt;p&gt;systemdによって起動させられたUnitのログは&lt;code&gt;/var/log/journal&lt;/code&gt;以下に&#xA;バイナリ形式で保存される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bubbleteaで学ぶElmアーキテクチャ</title>
      <link>http://localhost:1313/posts/elm/</link>
      <pubDate>Sat, 10 May 2025 12:52:08 +0900</pubDate>
      <guid>http://localhost:1313/posts/elm/</guid>
      <description>&lt;p&gt;最近ハマってるGoのTUIフレームワークBubbleteaのメモなど&lt;/p&gt;&#xA;&lt;p&gt;BubbleTeaは、TUIでのフロントエンド構築用フレームワーク&lt;/p&gt;&#xA;&lt;p&gt;Elmアーキテクチャを実装している。&#xA;Elmアーキテクチャを構成する要素&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Model: アプリケーションの状態を保持したデータ&lt;/li&gt;&#xA;&lt;li&gt;View: Modelの状態を表示するための関数&lt;/li&gt;&#xA;&lt;li&gt;Update: Modelを更新するための関数&lt;/li&gt;&#xA;&lt;li&gt;Msg: モジュール間で通信するためのデータ。親から子へ一方通行の伝搬&lt;/li&gt;&#xA;&lt;li&gt;Cmd: elmランタイムに対してMsgを登録し実行させるためのデータ。Msgを返す関数で副作用はCmdで扱う。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;処理の流れ&#34;&gt;処理の流れ&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ユーザからの入力やイベント&lt;/li&gt;&#xA;&lt;li&gt;ランタイム(BubbleTea)がUpdateを呼び出す&#xA;&lt;ul&gt;&#xA;&lt;li&gt;入力やイベントはUpdateにMsgという形で渡される&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;UpdateはMsgの種類・内容に応じてModelを更新する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Update, Viewは純粋関数&lt;/p&gt;&#xA;&lt;h2 id=&#34;bubble-teaでの実装&#34;&gt;Bubble Teaでの実装&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Modelは以下３つのメソッドを持つインターフェース&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Init() Cmd&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Update(Msg) (Model, Cmd)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;View() string&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Updateは値呼び関数なので、変更後のモデルを返している&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Msgは&lt;code&gt;interface{}&lt;/code&gt;なので型はなんでもOK。Msgは以下のような種類が定義されている&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;tea.KeyMsg&lt;/code&gt;: キー入力&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tea.WindowSizeMsg&lt;/code&gt;: ウィンドウサイズ変更&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tea.MouseMsg&lt;/code&gt;: マウスイベント&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Cmdは&lt;code&gt;func() Msg&lt;/code&gt;でMsgを返す関数型&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CmdはI/O処理を実行するために使われる&lt;/li&gt;&#xA;&lt;li&gt;Updateから返されたCmdは、BubbleTeaランタイムがgoroutineとして非同期に実行する&lt;/li&gt;&#xA;&lt;li&gt;Cmdの使用例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HTTPリクエストを送信し、結果のMsgを返すCmd&lt;/li&gt;&#xA;&lt;li&gt;ファイルを読み込み、grepした結果のMsgを返すCmd&lt;/li&gt;&#xA;&lt;li&gt;現在時刻を取得し、Msgにして返すCmd&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tea.Batch&lt;/code&gt;: 複数のCmdを実行するCmd&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tea.Exec&lt;/code&gt;: 別のプログラムを実行するCmd&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tea.Quit&lt;/code&gt;: プログラムを終了するCmd&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>よく使うDockerコマンド</title>
      <link>http://localhost:1313/posts/docker/</link>
      <pubDate>Sat, 10 May 2025 12:50:24 +0900</pubDate>
      <guid>http://localhost:1313/posts/docker/</guid>
      <description>&lt;p&gt;コマンド忘れがちなのでメモ残しときます&lt;/p&gt;&#xA;&lt;h2 id=&#34;コマンドまとめ&#34;&gt;コマンドまとめ&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;docker container run [option] &amp;lt;image&amp;gt; [command]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--interactive&lt;/code&gt;, &lt;code&gt;-i&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--tty&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--detach&lt;/code&gt;, &lt;code&gt;-d&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--name &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--env &amp;quot;&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--env-file &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--publish &amp;lt;hostport&amp;gt;:&amp;lt;containerport&amp;gt;&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--platform&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--volume &amp;lt;name&amp;gt;:&amp;lt;target&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--mount type=&amp;lt;bind|mount&amp;gt;,src=&amp;lt;name&amp;gt;,dst=&amp;lt;target&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--network &amp;lt;network&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--network-alias&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;docker container ls [option]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;--all&lt;/code&gt;, &lt;code&gt;-a&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;docker container stop [option] &amp;lt;container&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;docker container rm [option] &amp;lt;container&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;--force&lt;/code&gt;, &lt;code&gt;-f&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;docker container exec [option] &amp;lt;container&amp;gt; command&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;docker image ls [option]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;docker image pull [option] &amp;lt;image&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;docker image build [option] &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoデバッガDelveの使い方</title>
      <link>http://localhost:1313/posts/delve/</link>
      <pubDate>Sat, 10 May 2025 12:46:35 +0900</pubDate>
      <guid>http://localhost:1313/posts/delve/</guid>
      <description>&lt;p&gt;GoのデバッガDelveの使い方メモ&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本コマンド&#34;&gt;基本コマンド&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;dlv help&lt;/code&gt;: ヘルプ表示&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;dlv debug &amp;lt;pkg&amp;gt;&lt;/code&gt;: デバッグの開始&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;funcs [&amp;lt;regex&amp;gt;]&lt;/code&gt;: 関数一覧の表示&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;break &amp;lt;package&amp;gt;.&amp;lt;func&amp;gt;:[line]&lt;/code&gt;: ブレークポイントを設定。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;continue&lt;/code&gt;: ブレークポイントまで実行&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;next&lt;/code&gt;: 1行実行&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;print &amp;lt;val&amp;gt;&lt;/code&gt;: 変数の値を表示&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;locals&lt;/code&gt;: ローカル変数一覧を表示&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;set &amp;lt;val&amp;gt;&lt;/code&gt;: 変数の値を上書き&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;list&lt;/code&gt;: 現在位置のソースコードを表示&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;step&lt;/code&gt;: 関数内にステップイン&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;stack&lt;/code&gt;: スタック(バックトレース)の表示&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;frame &amp;lt;m&amp;gt;&lt;/code&gt;: フレームをセット&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;frame &amp;lt;m&amp;gt; &amp;lt;cmd&amp;gt;&lt;/code&gt;: スタックトレース上の指定のフレーム上でデバッグコマンドを実行&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;stepout&lt;/code&gt;: 関数を抜ける&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;exit&lt;/code&gt;: デバッグ終了&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;help &amp;lt;cmd&amp;gt;&lt;/code&gt;: デバッグコマンドのヘルプ表示&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Neovim設定メモ</title>
      <link>http://localhost:1313/posts/neovim/</link>
      <pubDate>Sat, 10 May 2025 12:44:43 +0900</pubDate>
      <guid>http://localhost:1313/posts/neovim/</guid>
      <description>&lt;p&gt;Neovimの設定に関するメモ&lt;/p&gt;&#xA;&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;~/.config/nvim/&lt;/code&gt;以下に記述&lt;/p&gt;&#xA;&lt;h2 id=&#34;neovim-apis&#34;&gt;Neovim APIs&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;require(&amp;quot;myluamodule&amp;quot;)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;runtimepath&lt;/code&gt;内の&lt;code&gt;/lua&lt;/code&gt;ディレクトリ配下を全て検索し一致ファイルを読み込む&lt;/li&gt;&#xA;&lt;li&gt;2度呼ばれ他場合は呼び出されたファイルの結果はキャッシュされ使われる&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;package.loaded[&#39;myluamodule&#39;] = nil&lt;/code&gt;: キャッシュを削除する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;vim.api.nvim_create_user_command(name, func, opts)&lt;/code&gt;: 自作のコマンドを作成する&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;(例) &lt;code&gt;vim.api.nvim_create_user_command(&#39;Test&#39;, &#39;echo &amp;quot;It works!&amp;quot;&#39;, {})&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;vim.api.nvim_create_buf(listed, scratch)&lt;/code&gt;: 新規で空のバッファを作る&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;listed&lt;/code&gt;: &lt;code&gt;buflisted&lt;/code&gt;にセットするかどうか。セットされると&lt;code&gt;:ls&lt;/code&gt;で表示されるようになる&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;scratch&lt;/code&gt;: scratchバッファにするかどうか。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スクラッチバッファはファイルを持たずテキストのみを持つ一時的なバッファ&lt;/li&gt;&#xA;&lt;li&gt;ウィンドウが閉じると削除される&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;vim.api.nvim_open_win({buffer}, {enter}, {config})&lt;/code&gt;: バッファをウィンドウに表示する&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;buffer&lt;/code&gt;: 表示するバッファ&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;enter&lt;/code&gt;: 開いたウィンドウに入るかどうか&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;config&lt;/code&gt;: ウィンドウのサイズや位置の設定。ウィンドウの種類が&lt;code&gt;floating&lt;/code&gt;か&lt;code&gt;external&lt;/code&gt;かもここで設定する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--@param {param} {type}&lt;/code&gt;: LuanDocsの記述　アノテーションのような物&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;引数paramがtype型の値であることを意味する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;treesitter-apis&#34;&gt;TreeSitter APIs&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://neovim.io/doc/user/treesitter.html&#34;&gt;TreeSitter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;プラグイン作成方法&#34;&gt;プラグイン作成方法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;~.nvim&lt;/code&gt;ディレクトリを作成&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;lua/&lt;/code&gt;, &lt;code&gt;plugin/&lt;/code&gt;ディレクトリを配置&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;lua/&lt;/code&gt;: プラグイン本体のプログラムを配置。関数などを定義する&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;plugin/&lt;/code&gt;: プラグインとしてロードされた際に&lt;code&gt;lua/&lt;/code&gt;で定義された関数などをNeovimにコマンドとして登録&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Lazyの設定を追加&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;lazyの仕組みfor自分&#34;&gt;Lazyの仕組み(for自分)&lt;/h2&gt;&#xA;&lt;p&gt;ディレクトリ構造によって違うので注意。以下は自分だけ。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;が読み込まれる&lt;/li&gt;&#xA;&lt;li&gt;その中で&lt;code&gt;core.lazy&lt;/code&gt;モジュールが読み込まれる&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;lazy&lt;/code&gt;モジュールの&lt;code&gt;setup()&lt;/code&gt;関数内でその他のパッケージ(モジュール)が読み込まれる&lt;/li&gt;&#xA;&lt;li&gt;個々のモジュールは&lt;code&gt;plugins/&lt;/code&gt;ディレクトリに詳細が記述されている&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;luaについてプラグインの管理方法&#34;&gt;Luaについて/プラグインの管理方法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;プラグインの実体データは&lt;code&gt;~/.local/share/nvim/&lt;/code&gt;配下にLuaプログラムとして保存されてる。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;require(&amp;quot;package&amp;quot;)&lt;/code&gt;は、文字列型の&lt;code&gt;package.path&lt;/code&gt;の中からマッチした部分を返す&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;?&lt;/code&gt;の部分を置き換えて、そのパスが存在するかどうかを確認している&lt;/li&gt;&#xA;&lt;li&gt;返り値はstem型(型情報を持たない)なので都度キャストが必要&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;見つかった場合、&lt;code&gt;package.loaded[&amp;quot;package&amp;quot;]&lt;/code&gt;にキャッシュされる&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
